# Production Dockerfile for PhraseMachine v2 Main API Server
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    curl

# Copy package files
COPY package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Remove development files and unnecessary directories
RUN rm -rf \
    tests/ \
    tools/ \
    docs/ \
    *.test.js \
    *.spec.js \
    .git \
    .gitignore \
    README.md

# Production stage
FROM node:18-alpine AS production

# Create non-root user
RUN addgroup -g 1001 -S phrasemachine && \
    adduser -S phrasemachine -u 1001 -G phrasemachine

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy from builder stage
COPY --from=builder --chown=phrasemachine:phrasemachine /app/node_modules ./node_modules
COPY --from=builder --chown=phrasemachine:phrasemachine /app/services ./services
COPY --from=builder --chown=phrasemachine:phrasemachine /app/package*.json ./

# Set environment variables
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=512"
ENV PHRASEMACHINE_API_PORT=3000

# Expose port
EXPOSE 3000

# Switch to non-root user
USER phrasemachine

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "services/api/main-server.js"] 