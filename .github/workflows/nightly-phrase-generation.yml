name: 🌙 Nightly Phrase Generation

on:
  schedule:
    # Run nightly at 2:00 AM UTC (adjust for your timezone)
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering with custom parameters
    inputs:
      max_batches:
        description: 'Maximum batches to run'
        required: false
        default: '20'
        type: string
      target_phrases:
        description: 'Target new phrases to generate'
        required: false
        default: '120'
        type: string
      quality_threshold:
        description: 'Minimum quality score threshold'
        required: false
        default: '65'
        type: string
      dry_run:
        description: 'Run in dry-run mode (no API calls)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  nightly-generation:
    name: 🤖 Generate Phrases
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          # Need full history for proper git operations
          fetch-depth: 0
          # Use a personal access token for commits
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'tools/phrase-database/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: tools/phrase-database
        run: npm ci

      - name: 🔑 Setup environment
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "NIGHTLY_MAX_BATCHES=${{ github.event.inputs.max_batches || '20' }}" >> $GITHUB_ENV
          echo "NIGHTLY_TARGET_PHRASES=${{ github.event.inputs.target_phrases || '120' }}" >> $GITHUB_ENV
          echo "NIGHTLY_QUALITY_THRESHOLD=${{ github.event.inputs.quality_threshold || '65' }}" >> $GITHUB_ENV
          echo "NIGHTLY_MAX_DUPLICATE_RATE=0.15" >> $GITHUB_ENV

      - name: 🌙 Run nightly generation
        id: generation
        working-directory: tools/phrase-database
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 Running in dry-run mode"
            node scripts/generate-nightly.js --dry-run
          else
            echo "🚀 Running phrase generation"
            node scripts/generate-nightly.js
          fi
        continue-on-error: true

      - name: 📊 Parse generation results
        id: parse
        working-directory: tools/phrase-database
        run: |
          # Get the latest metrics file
          LATEST_METRICS=$(ls -t data/nightly-metrics/nightly-*.json 2>/dev/null | head -1 || echo "")
          
          if [ -n "$LATEST_METRICS" ] && [ -f "$LATEST_METRICS" ]; then
            echo "📄 Found metrics file: $LATEST_METRICS"
            
            # Extract key metrics using jq
            NEW_PHRASES=$(jq -r '.postGeneration.newPhrases // 0' "$LATEST_METRICS")
            TOTAL_PHRASES=$(jq -r '.postGeneration.totalPhrases // 0' "$LATEST_METRICS")
            QUALITY_SCORE=$(jq -r '.qualityCheck.averageScore // 0' "$LATEST_METRICS")
            QUALITY_PASSED=$(jq -r '.qualityCheck.passed // false' "$LATEST_METRICS")
            SUCCESS=$(jq -r '.success // false' "$LATEST_METRICS")
            SESSION_ID=$(jq -r '.sessionId // "unknown"' "$LATEST_METRICS")
            
            echo "new_phrases=$NEW_PHRASES" >> $GITHUB_OUTPUT
            echo "total_phrases=$TOTAL_PHRASES" >> $GITHUB_OUTPUT
            echo "quality_score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
            echo "quality_passed=$QUALITY_PASSED" >> $GITHUB_OUTPUT
            echo "success=$SUCCESS" >> $GITHUB_OUTPUT
            echo "session_id=$SESSION_ID" >> $GITHUB_OUTPUT
            echo "has_metrics=true" >> $GITHUB_OUTPUT
            
            echo "📊 Parsed metrics:"
            echo "  New phrases: $NEW_PHRASES"
            echo "  Total phrases: $TOTAL_PHRASES"
            echo "  Quality: $QUALITY_SCORE/100"
            echo "  Success: $SUCCESS"
          else
            echo "⚠️ No metrics file found"
            echo "has_metrics=false" >> $GITHUB_OUTPUT
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: 📈 Check for database changes
        id: changes
        run: |
          cd tools/phrase-database
          
          # Check if database file has changes
          if git diff --name-only | grep -q "data/phrases.db\|task.*\.json"; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📊 Database changes detected"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "📊 No database changes"
          fi

      - name: 🎯 Create PR with new phrases
        if: steps.parse.outputs.success == 'true' && steps.changes.outputs.has_changes == 'true' && github.event.inputs.dry_run != 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🌙 Nightly phrase generation: +${{ steps.parse.outputs.new_phrases }} phrases
            
            Session: ${{ steps.parse.outputs.session_id }}
            New phrases: ${{ steps.parse.outputs.new_phrases }}
            Total phrases: ${{ steps.parse.outputs.total_phrases }}
            Quality score: ${{ steps.parse.outputs.quality_score }}/100
            Quality check: ${{ steps.parse.outputs.quality_passed == 'true' && '✅ PASSED' || '❌ FAILED' }}
            
            Automated generation via nightly pipeline.
          title: |
            🌙 Nightly Generation: +${{ steps.parse.outputs.new_phrases }} phrases (${{ steps.parse.outputs.total_phrases }} total)
          body: |
            ## 🌙 Nightly Phrase Generation Results
            
            **Session ID:** `${{ steps.parse.outputs.session_id }}`
            
            ### 📊 Generation Summary
            - **New phrases:** ${{ steps.parse.outputs.new_phrases }}
            - **Total phrases:** ${{ steps.parse.outputs.total_phrases }}
            - **Quality score:** ${{ steps.parse.outputs.quality_score }}/100
            - **Quality check:** ${{ steps.parse.outputs.quality_passed == 'true' && '✅ PASSED' || '❌ FAILED' }}
            - **Progress:** ${{ steps.parse.outputs.total_phrases }}/5000 phrases (${{ steps.parse.outputs.total_phrases * 100 / 5000 }}% toward goal)
            
            ### 🤖 Automation Details
            - **Triggered:** Nightly scheduled generation
            - **Time:** ${{ github.run_started_at }}
            - **Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### 🎯 Next Steps
            - [ ] Review generated phrases for quality
            - [ ] Test phrases in game if desired
            - [ ] Merge when ready to deploy
            
            > This PR was automatically created by the nightly phrase generation pipeline.
            > The phrases have been generated using OpenAI with quality validation.
            
            ---
            
            **Phrase Pool Expansion Progress:** ${{ steps.parse.outputs.total_phrases }}/5000 phrases (Task 5: Continuous Generation Pipeline)
          branch: nightly-generation-${{ steps.parse.outputs.session_id }}
          delete-branch: true
          draft: false

      - name: 🚨 Alert on failure
        if: failure() || steps.parse.outputs.success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Nightly Phrase Generation Failed';
            const body = `
            ## 🚨 Nightly Generation Failure Alert
            
            **Time:** ${{ github.run_started_at }}
            **Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Session:** ${{ steps.parse.outputs.session_id || 'unknown' }}
            
            ### 📊 Status
            - **Success:** ${{ steps.parse.outputs.success || 'false' }}
            - **Has metrics:** ${{ steps.parse.outputs.has_metrics || 'false' }}
            - **Quality passed:** ${{ steps.parse.outputs.quality_passed || 'false' }}
            
            ### 🔍 Investigation
            1. Check the workflow logs for error details
            2. Verify OpenAI API key is valid and has quota
            3. Review database integrity
            4. Check for any infrastructure issues
            
            ### 🛠️ Recovery
            - Manual retry: Re-run the workflow with custom parameters
            - Emergency mode: Run with smaller batch sizes
            - Fallback: Use dry-run mode to test infrastructure
            
            Please investigate and resolve before the next scheduled run.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['🚨 alert', '🤖 automation', '🌙 nightly-generation']
            });

      - name: 📋 Upload metrics artifact
        if: steps.parse.outputs.has_metrics == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: nightly-metrics-${{ steps.parse.outputs.session_id }}
          path: tools/phrase-database/data/nightly-metrics/
          retention-days: 30

      - name: 📋 Upload alerts artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-alerts-${{ github.run_id }}
          path: tools/phrase-database/data/alerts/
          retention-days: 90

      - name: ✅ Success summary
        if: success() && steps.parse.outputs.success == 'true'
        run: |
          echo "🎉 Nightly generation completed successfully!"
          echo "📊 New phrases: ${{ steps.parse.outputs.new_phrases }}"
          echo "📊 Total phrases: ${{ steps.parse.outputs.total_phrases }}"
          echo "🎯 Quality: ${{ steps.parse.outputs.quality_score }}/100"
          echo "📈 Progress: ${{ steps.parse.outputs.total_phrases }}/5000 phrases"

  # Optional: Weekly summary job
  weekly-summary:
    name: 📊 Weekly Summary
    runs-on: ubuntu-latest
    needs: nightly-generation
    if: github.event.schedule && github.ref == 'refs/heads/main'
    # Only run on Sundays for weekly summary
    # (We'll skip this for now, but it's ready for future enhancement)
    # steps would analyze weekly metrics and create summary reports 